spring:
  application:
    name: aam-backend-service
  main:
    banner-mode: off
  jackson:
    deserialization:
      accept-empty-string-as-null-object: true
      read-unknown-enum-values-using-default-value: true
  rabbitmq:
    listener:
      simple:
        prefetch: 1
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
  threads:
    virtual:
      enabled: true
  servlet:
    multipart:
      max-file-size: 5MB

server:
  servlet:
    context-path: /api

management:
  endpoint:
    health:
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - features
  tracing:
    sampling:
      probability: 1

features:
  export-api:
    enabled: false
  skill-api:
    mode: disabled
  notification-api:
    enabled: false
  third-party-authentication:
    enabled: false

# enable/disables event processing for each queue
events:
  listener:
    report-calculation:
      enabled: true

notification-firebase-configuration:
  link-base-url: ${application.base-url}

logging:
  logback:
    rollingpolicy:
      max-file-size: 50MB
      total-size-cap: 50MB
      clean-history-on-start: true

---
# <second part of the config, just active with profile "local-development">

spring:
  config:
    activate:
      on-profile: local-development
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://keycloak.localhost/realms/dummy-realm
  ssl:
    bundle:
      pem:
        local-development:
          truststore:
            certificate: "classpath:reverse-proxy.crt" # this is the certificate of the local running caddy proxy
  rabbitmq:
    virtual-host: local
    listener:
      direct:
        retry:
          enabled: true
          max-attempts: 5
      simple:
        observation-enabled: true
    username: local-spring
    password: docker
  datasource:
    url: jdbc:postgresql://localhost:5402/aam-backend-service
    username: admin
    password: docker

server:
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always
  port: 9000

logging:
  level:
    #    org.springframework.amqp.rabbit: warn
    #    org.springframework.web: debug
    #    org.springframework.http: debug
    #    org.springframework.security: debug
    com.aamdigital.aambackendservice: trace

aam-render-api-client-configuration:
  base-path: https://pdf.aam-digital.dev
#  auth-config:
#   client-id: <needs-environment-configuration>
#   client-secret: <needs-environment-configuration>
#   token-endpoint: <needs-environment-configuration>
#   grant-type: <needs-environment-configuration>
#   scope: <needs-environment-configuration>

couch-db-client-configuration:
  base-path: https://aam.localhost/db/couchdb
  basic-auth-username: admin
  basic-auth-password: docker

sqs-client-configuration:
  base-path: https://aam.localhost/sqs
  basic-auth-username: admin
  basic-auth-password: docker

skilllab-api-client-configuration:
  api-key: skilllab-api-key
  project-id: dummy-project
  base-path: https://aam.localhost/skilllab
  response-timeout-in-seconds: 15

features:
  export-api:
    enabled: false
  skill-api:
    mode: disabled
  notification-api:
    enabled: false
    mode: firebase
  third-party-authentication:
    enabled: true

keycloak:
  realm: dummy-realm
  client-id: aam-backend
  client-secret: 1234
  server-url: https://keycloak.localhost
  application-url: aam.localhost

crypto-configuration:
  secret: super-duper-secret

events:
  listener:
    report-calculation:
      enabled: false

database-change-detection:
  enabled: false

sentry:
  logging:
    enabled: false

application:
  base-url: https://aam.localhost
  # sentry version
  version: local-dev-build

#management:
#  otlp:
#    tracing:
#      endpoint: http://localhost:4318/v1/traces
